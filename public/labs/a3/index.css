/**3.1.3 Linking CSS styling documents with the link tag (4pts)*/
/*This is the same content currently in the style tag.
 <style>
      p {
        background-color: blue;
        color: white;
      }
    </style>
*/
/*We'll use this file from now on for this assignment*/

/* comment out the highlighted paragraph CSS rule, therefore, not all <p> will apply this style
p {
    background-color: blue;
    color: white;
}
*/

/*3.2.1 Selecting content with ID selectors (3pts)*/
/*with unique id for <p>*/
p#id-selector-1 {
    background-color: red;
    color: white;
}
p#id-selector-2 {
    background-color: yellow;
    color: black;
}
/*3.2.2 Selecting content with class selectors (3pts)*/
.class-selector {
    background-color: yellow;
    color: blue;
}

/*3.2.3 Selecting content based on the document structure (4pts)*/
/*A set of selectors separated by a space can refer to elements in a hierarchy*/
.selector-1 .selector-3 {
    background-color: red;
    color: white;
}
/*If we use ">" instead to separate the classes, then we can establish a direct parent/child relationship.*/
.selector-2 > .selector-3 > .selector-4 {
    background-color: yellow;
    color: blue;
}

/*3.3.1 Styling the foreground color (2.5pts)*/
/* selects some DOM element    */
/* sets color property to blue */
.some-css-selector {color: blue;}
/*RGB*/
.the-sun {color: rgb(255,255,0);}
/*strings*/
.the-sky {color: blue;}
/*hexadecimals*/
.ketchup {color: #FF0000;}

.fg-color-black { color: black; }
.fg-color-white { color: white; }
.fg-color-blue { color: #7070ff; }
.fg-color-red { color: #ff7070; }
.fg-color-green { color: green; }

/*3.3.2 Styling the background color (2.5pts)*/
.bg-color-yellow {
    background-color: #ffff07;
}
.bg-color-blue {
    background-color: #7070ff;
}
.bg-color-red {
    background-color: #ff7070;
}
.bg-color-green {
    background-color: green;
}

/*<!--3.4.1 Styling borders (2.5pts)-->*/
/* configure border with several properties*/
/* border's width. Can also provide per border*/
/* the style of the border*/
/* the color of the border     */
/*.some-selector {*/
/*    border-width: 10px;*/
/*    border-style: solid|dotted|dashed|double;*/
/*    border-color: red | blue ...;*/
/*}*/
/*.border-fat {
    border-width: 20px 30px 100px 50px; }
The CSS code you provided defines a class called .border-fat which sets the width of the border to 20 pixels on the top,
30 pixels on the left side, 100 pixels on the bottom, and 50 pixels on the right side.*/
.border-fat {
    border-width: 20px 30px 20px 30px; }
/*The CSS code you provided defines a class called .border-thin which sets the width of all four sides of the border to 4 pixels.
So, an HTML element to which this class is applied will have a border of 4 pixels thickness all around it.*/
.border-thin {
    border-width: 4px; }
.border-solid {
    border-style: solid; }
.border-dashed {
    border-style: dashed; }
.border-yellow {
    border-color: #ffff07; }
.border-red {
    border-color: #ff7070; }
.border-blue {
    border-color: #7070ff; }

/*3.4.2 Stying margins and paddings (5pts)*/
/*top left -> has 50 px space with top and 50px space with left*/
.padded-top-left {
    padding-top: 50px;
    padding-left: 50px;
}
.padded-bottom-right {
    padding-bottom: 50px;
    padding-right: 50px;
}
.padding-fat {
    padding: 50px;
}

/*3.4.3 Stying corners (2.5pts)*/
.rounded-corners-top {
    border-top-left-radius: 40px;
    border-top-right-radius: 40px;
}

.rounded-corners-bottom {
    border-bottom-left-radius: 40px;
    border-bottom-right-radius: 40px;
}

.rounded-corners-all-around {
    border-radius: 50px;
}

.rounded-corners-inline {
    border-radius: 30px 0px 20px 50px;
}

/*3.5 Styling dimensions (3pts)*/
.dimension-portrait {
    width: 75px;
    height: 100px;
}

.dimension-landscape {
    width: 100px;
    height: 75px;
}

.dimension-square {
    width: 75px;
    height: 75px;
}

/*3.6.1 Styling relative position (2pts)*/
.pos-relative-nudge-up-right {
    position: relative;
    bottom: 30px;
    left: 30px;
}
.pos-relative-nudge-down-right {
    position: relative;
    top: 20px;
    left: 20px;
}
.pos-relative {
    position: relative;
}

/*3.6.2 Styling absolute position (2pts)*/
.pos-absolute-10-10 {
    position: absolute;
    top: 10px;
    left: 10px;
}
.pos-absolute-50-50 {
    position: absolute;
    top: 50px;
    left: 50px;
}
.pos-absolute-120-20 {
    position: absolute;
    top: 20px;
    left: 120px;
}

/*3.6.3 Styling fixed position (1pt)*/
.pos-fixed {
    position: fixed;
    right: 0px;
    bottom: 50%;
}

/*3.6.4 Styling z-index (1pt)*/
.zindex-bring-to-front {
    z-index: 10;
}

/*3.6.5 Floating content (2pts)*/
.float-left {
    float: left;
}

.float-right {
    float: right;
    /*height->element height*/
    height: 100px;
}

.float-done {
    clear: both;
}

/*3.6.6 Laying out content in a grid (4pts)*/
/*Using float we can implement a grid layout made up of rows and columns*/
.grid-row {
    clear: both;
/*    The CSS property "clear: both" is used to specify that an element should not float and should be placed
below any floating elements. This property is typically used to clear floated elements so that a new element
can start on a new line and not overlap the floated element.
The "both" value is used to clear floats on both the left and right sides of an element.*/
}

.grid-col-half-page {
    width: 50%;
    float: left;
}

.grid-col-third-page {
    width: 33%;
    float: left;
}

.grid-col-two-thirds-page {
    width: 67%;
    float: left;
}

.grid-col-left-sidebar {
    width: 20%;
    float: left;
}

.grid-col-main-content {
    width: 60%;
    float: left;
}

.grid-col-right-sidebar {
    width: 20%;
    float: left;
}
/*5*/
/*The CSS attribute transform provides some powerful transformations such as rotate. */
.rotate-paragraph {
    width: 250px;
    height: 250px;
    transform: rotate(90deg);
}
/*5.1 Rotate a list (5pts)*/
.rotate-list {
    transform: rotate(12deg);
    width: 100px;
    background-color: red;
    color: white;
}
/*5.2 Rotating a list item (5pts)*/
.rotate-list-items li {
    width: 100px;
    text-align: right;
}
.rotate-list-items li:nth-child(1) {
    transform: rotate(-10deg);
    background-color: yellow;
}
.rotate-list-items li:nth-child(2) {
    transform: rotate(2deg);
    background-color: blue;
    color: white;
}
.rotate-list-items li:nth-child(3) {
    transform: rotate(10deg);
    background-color: red;
}
/*5.3 Rotating images (5pts)*/
.rotate-image {
    transform: rotate(-10deg);
}
/*5.4 Rotate a table (5pts)*/
.rotate-table {
    position: relative;
    left: 50px;
    transform: rotate(15deg);}
.rotate-table tr:nth-child(1) {
    background-color: black;
    color: white;}
.rotate-table tr:nth-child(n+2) {
    background-color: yellow;}
.rotate-table tr:nth-child(n+5) {
    background-color: blue;
    color: white;}
.rotate-table tr:nth-child(n+8) {
    background-color: red;}
.rotate-table tr:nth-child(n+11) {
    background-color: green;
    color: white;
}
/*5.5 Gradients (10pts)*/
.gradients-linear {
    background: linear-gradient(red, black);
    width: 400px;
    height: 200px;
}
/*5.5.1 Radial gradients*/
.gradients-radial {
    background: radial-gradient(red, pink);
    width: 200px;
    height: 500px;
}
/*5.5.2 Positioning radial gradients*/
.gradients-positioned {
    background:
            radial-gradient(at bottom left, black, red);
    width: 400px;
    height: 400px;
    color: pink;
}
/*5.6 Animations (5pts)*/
/*5.6.1 Key frame animations*/
.animation-keyframes {
    position: relative;
    top: 0px;
    animation-duration: 7s;
    animation-name: slidein;
    width: 200px;
    height: 200px;
    background-color: red;
    color: white;
}
@keyframes slidein {
    from {
        position: relative;
        top: 0px;
        font-size: 100%;
        margin-left: 100%;
        width: 200px;
        height: 200px;
        background-color: yellow;
        color: black;
    } /* continued on right */
    50% {
        position: relative;
        top: -200px;
        font-size: 300%;
        margin-left: 25%;
        width: 400px;
        height: 400px;
        background-color: blue;
        color: white;
    }
    to {
        position: relative;
        top: 0px;
        font-size: 100%;
        margin-left: 0%;
        width: 200px;
        height: 200px;
        background-color: red;
        color: white;
    }
}
/*own example*/
.animation-example{
    animation-name: textAnim;
    animation-duration: 2s;
    animation-iteration-count: infinite;
    animation-direction: alternate;
}
@keyframes textAnim {
    0% {
        color: blue;
        font-size: 20px;
    }
    50% {
        color: red;
        font-size: 25px;
    }
    100% {
        color: blue;
        font-size: 20px;
    }
}
/*5.7 Flex (10pts)*/
.flex-container {
    border-width: 5px;
    border-color: black;
    border-style: solid;
}
.flex-box {
    border: 5px gray solid;
    margin: 10px;
    padding: 10px;
}
.flex-box-1 {
    background-color: yellow;
}
.flex-box-2 {
    background-color: blue;
    color: white;
}
.flex-box-3 {
    background-color: red;
    color: white;
}
/*5.7.1 Aligning flex elements horizontally*/
.flex-container-1 {
    border-width: 5px;
    border-color: black;
    border-style: solid;
    display: flex;
}
.flex-container-2 {
    border-width: 5px;
    border-color: black;
    border-style: solid;
    display: flex;
    justify-content: center;
}
.flex-container-3 {
    border-width: 5px;
    border-color: black;
    border-style: solid;
    display: flex;
    justify-content: end;
}
.flex-container-4 {
    border-width: 5px;
    border-color: black;
    border-style: solid;
    display: flex;
    justify-content: space-around;
}
.flex-container-5 {
    border-width: 5px;
    border-color: black;
    border-style: solid;
    display: flex;
    justify-content: space-between;
}
/*5.7.2 Aligning flex elements vertically*/
.flex-container-6 {
    border-width: 5px;
    border-color: black;
    border-style: solid;
    display: flex;
    justify-content: space-evenly;
    align-items: flex-start;
}
.flex-container-7 {
    border-width: 5px;
    border-color: black;
    border-style: solid;
    display: flex;
    justify-content: space-evenly;
    align-items: center;
}
.flex-container-8 {
    border-width: 5px;
    border-color: black;
    border-style: solid;
    display: flex;
    /*justify-content: space-evenly;*/
    /*align-items: center;*/
}
.flex-container-8 > .flex-box {
    flex-basis: 100%;
}
/*5.8 Media queries (5pts)*/
@media (min-width: 0px)
and (max-width: 600px) {
    body {
        background-color: yellow;
    }
    .media-query {
        background-color: red;
        color: white;
    }
}
/*@media (min-width: 600px)*/
/*and (max-width: 1200px) {*/
/*    body {*/
/*        background-color: blue;*/
/*        color: white;*/
/*    }*/
/*    .media-query {*/
/*        background-color: yellow;*/
/*        color: black;*/
/*    }*/
/*}*/
@media (min-width: 0px)
and (max-width: 600px) {
    body {
        background-color: yellow;
    }
    .media-query {
        background-color: red;
        color: white;
    }
}
@media (min-width: 600px)
and (max-width: 1200px) {
    body {
        background-color: blue;
        color: white;
    }
    .media-query {
        background-color: yellow;
        color: black;
    }
}
@media (min-width: 1200px)
and (max-width: 1800px) {
    body {
        background-color: red;
        color: white;
    }
    .media-query {
        background-color: blue;
        color: white;
    }
}
/*own*/
@media (min-width: 701px) and (max-width: 900px) {
    h1 {
        font-size: 100px;
    }
    p {
        font-size: 80px;
    }
    .media-example{
        width: 90%;
    }
}
@media (min-width: 501px) and (max-width: 700px) {
    h1 {
        font-size: 75px;
    }
    p {
        font-size: 55px;
    }
    .media-example {
        width: 60%;
    }
}
@media (min-width: 301px) and (max-width: 500px) {
    h1 {
        font-size: 45px;
    }
    p {
        font-size: 25px;
    }
    .media-example {
        width: 30%;
    }
}









